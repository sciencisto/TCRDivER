# Specify working directory
w_dir_path="[substitute_w_path_to_working_dir]"

# Specify data directory:
data_dir_path="[substitute_w_path_to_output_dir]"

#TCRDivER code directory:
TCRDivER_dir="[substitute_w_path_to_dir_with_code]"

# Run data count algorithm 
# If samples are a list of CDR3s provided in a text file set option to "count"
# If samples provided in Adaptive ImmunoSeq database format set option to "don't count"
# Options are "count" "don't count"

count="don't count"

# Each sample is filtered for the "In" frame sequences. 
# Depending on the option selected the counts of "In" frame CDR3s can stay the same (no subsampling), or a subsampling technique can be employed 
# Options are: 
# 	"None" doesn't subsample
# 	"highest" subsamples kk highest clones based on frequency
# 	"lowest" subsamples kk lowest clones based on frequency
# 	"random" subsamples kk random clones based on frequency distribution

filtering_mode="random"

# If filtering_mode is not None then specify the size of the subsample

subsample_size="50000"

# If data provided as counts and not frequencies, then you can also opt to filter out singlets (not reliable):
# Options are "filter_singlets"  or "None"
#
filter_singlets="None"

# Distance matrix is calculated in a paralell fasshion for subsets (chunks) of CDR3s. Default value is 100. 

chunk_size="100"

#Distance matrix is calculated using one of the implemented CDR3 distance options: 
#Options are:
#	"AF_euclidean" 		Atchley factor distance:  calculated using Atchley factors for each amino acid, as described in: 
#				# Atchley et al. "Solving the protein sequence metric problem" 2005, PNAS, vol 102, p 6395-6400.
#				It is the euclidean distance between average 5 AFs for each CDR3.
#
#	"Levenshtein" 		Levenshtein distance: distance between two strings
#				It is the minimum number of single-character edits (insertions, deletions or substitutions) required to change one string into the other
#
#	"BLOSUM45_score_dist"	Distance between two CDR3s calculated based on the BLOSUM45 scoring matrix using global alignment. 
#				Calculated as: 1- Blosum45_score(CDR3_1, CDR3_2)/max(Blosum45_score(CDR3_1, CDR3_1),Blosum45_score(CDR3_2,CDR32))

distance="AF_euclidean"

# Specify q value for Diversity calculation. The algorithm takes in a list. Default value is provided below:
q_values="[0,1,2,3,4,5,6,inf]"

# Specify lambda values for similarity scaled diversity calculations. The algorithm takes in a list. Default values are provided below:
lambda_values="[0.1,0.2,0.25,0.3,0.4,0.5,0.75,1.0,1.5,2.0,4.0,8.0,16.0,32.0,64.0]"








